import{_ as s,c as a,o as n,a as l}from"./app.5c7a3dbc.js";const C=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[{"level":2,"title":"Documentation 0.7.0-rev2","slug":"documentation-0-7-0-rev2","link":"#documentation-0-7-0-rev2","children":[{"level":3,"title":"Language Handler","slug":"language-handler","link":"#language-handler","children":[]},{"level":3,"title":"1. Language Packs: ES6 Modules","slug":"_1-language-packs-es6-modules","link":"#_1-language-packs-es6-modules","children":[]},{"level":3,"title":"2. Language Packs: ES5 Modules","slug":"_2-language-packs-es5-modules","link":"#_2-language-packs-es5-modules","children":[]},{"level":3,"title":"Partial Tokenizer","slug":"partial-tokenizer","link":"#partial-tokenizer","children":[]},{"level":3,"title":"Language Processing Pipeline","slug":"language-processing-pipeline","link":"#language-processing-pipeline","children":[]},{"level":3,"title":"How to contribute?","slug":"how-to-contribute","link":"#how-to-contribute","children":[]}]}],"relativePath":"0.7.0-lang.md"}'),e={name:"0.7.0-lang.md"},o=l(`<h2 id="documentation-0-7-0-rev2" tabindex="-1">Documentation 0.7.0-rev2 <a class="header-anchor" href="#documentation-0-7-0-rev2" aria-hidden="true">#</a></h2><h3 id="language-handler" tabindex="-1">Language Handler <a class="header-anchor" href="#language-handler" aria-hidden="true">#</a></h3><p>Handling languages was completely replaced by a more generic approach. All language-specific definitions has excluded and was optimized for maximum dead-code elimination when using compiler/bundler. Each language exists of 5 definitions, which are divided into two groups:</p><ol><li>Charset <ol><li><em><strong>encode</strong></em>, type: <code>function(string):string[]</code></li><li><em><strong>rtl</strong></em>, type: <code>boolean</code></li></ol></li><li>Language <ol><li><em><strong>matcher</strong></em>, type: <code>{string: string}</code></li><li><em><strong>stemmer</strong></em>, type: <code>{string: string}</code></li><li><em><strong>filter</strong></em>, type: <code>string[]</code></li></ol></li></ol><p>The charset contains the encoding logic, the language contains stemmer, stopword filter and matchers. Multiple language definitions can use the same charset encoder. Also this separation let you manage different language definitions for special use cases (e.g. names, cities, dialects/slang, etc.).</p><p>To fully describe a custom language <strong>on the fly</strong> you need to pass:</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> index </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">FlexSearch</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;">// mandatory:</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#82AAFF;">encode</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">str</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> [str]</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;">// optionally:</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">rtl</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FF9CAC;">false</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">stemmer</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{},</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">matcher</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{},</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">filter</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> []</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><p>When passing no parameter it uses the <code>latin:default</code> schema by default.</p><table><tr></tr><tr><td>Field</td><td>Category</td><td>Description</td></tr><tr><td><b>encode</b></td><td>charset</td><td>The encoder function. Has to return an array of separated words (or an empty string).</td></tr><tr></tr><tr><td><b>rtl</b></td><td>charset</td><td>A boolean property which indicates right-to-left encoding.</td></tr><tr></tr><tr><td><b>filter</b></td><td>language</td><td>Filter are also known as &quot;stopwords&quot;, they completely filter out words from being indexed.</td></tr><tr></tr><tr><td><b>stemmer</b></td><td>language</td><td>Stemmer removes word endings and is a kind of &quot;partial normalization&quot;. A word ending just matched when the word length is bigger than the matched partial.</td></tr><tr></tr><tr><td><b>matcher</b></td><td>language</td><td>Matcher replaces all occurrences of a given string regardless of its position and is also a kind of &quot;partial normalization&quot;.</td></tr></table><h3 id="_1-language-packs-es6-modules" tabindex="-1">1. Language Packs: ES6 Modules <a class="header-anchor" href="#_1-language-packs-es6-modules" aria-hidden="true">#</a></h3><p>The most simple way to assign charset/language specific encoding via modules is:</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">import</span><span style="color:#A6ACCD;"> charset </span><span style="color:#89DDFF;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">./dist/module/lang/latin/soundex.js</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">import</span><span style="color:#A6ACCD;"> lang </span><span style="color:#89DDFF;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">./dist/module/lang/en.js</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> index </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">FlexSearch</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">charset</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> charset</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">lang</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> lang</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><p>Just import the <strong>default export</strong> by each module and assign them accordingly.</p><p>The full qualified example from above is:</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">encode</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">rtl</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">tokenize</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">./dist/module/lang/latin/soundex.js</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">stemmer</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">filter</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">matcher</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">./dist/module/lang/en.js</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> index </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">FlexSearch</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">encode</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> encode</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;">// assign forced tokenizer first:</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">tokenize</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> tokenize </span><span style="color:#89DDFF;">||</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">forward</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">rtl</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> rtl</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">stemmer</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> stemmer</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">matcher</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> matcher</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">filter</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> filter</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><p>The example above is the standard interface which is at least exported from each charset/language.</p><p><strong>Note:</strong> Some of the encoder variants limit the use of built-in tokenizer (e.g. soundex). To be save prioritize the forced tokenizer and fall back to your choice, e.g. <code>tokenize || &quot;forward&quot;</code>.</p><h4 id="encoder-variants" tabindex="-1">Encoder Variants <a class="header-anchor" href="#encoder-variants" aria-hidden="true">#</a></h4><p>You remember the encoding variants like <code>simple</code>, <code>advanced</code>, <code>extra</code>, or <code>balanced</code>? These are also supported and provides you several variants of encoding (which differs in performance and degree of normalization).</p><p>It is pretty straight forward when using a encoder variant:</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">import</span><span style="color:#A6ACCD;"> advanced </span><span style="color:#89DDFF;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">./dist/module/lang/latin/advanced.js</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">encode</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">./dist/module/lang/latin/extra.js</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> index_advanced </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">FlexSearch</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;">// apply all definitions:</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">charset</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> advanced</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> index_extra </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">FlexSearch</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;">// just apply the encoder:</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">encode</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> encode</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><h4 id="available-latin-encoders" tabindex="-1">Available Latin Encoders <a class="header-anchor" href="#available-latin-encoders" aria-hidden="true">#</a></h4><ol><li>default</li><li>simple</li><li>advanced</li><li>extra</li><li>balance</li><li>soundex</li></ol><p>You can assign a charset by passing the charset during initialization, e.g. <code>charset: &quot;latin&quot;</code> for the default charset encoder or <code>charset: &quot;latin:soundex&quot;</code> for a encoder variant.</p><h4 id="dialect-slang" tabindex="-1">Dialect / Slang <a class="header-anchor" href="#dialect-slang" aria-hidden="true">#</a></h4><p>Language definitions (especially matchers) also could be used to normalize dialect and slang of a specific language.</p><h3 id="_2-language-packs-es5-modules" tabindex="-1">2. Language Packs: ES5 Modules <a class="header-anchor" href="#_2-language-packs-es5-modules" aria-hidden="true">#</a></h3><p>You need to make the charset and/or language definitions available by:</p><ol><li>All charset definitions are included in the <code>flexsearch.min.js</code> build by default, but no language-specific definitions are included</li><li>You can load packages located in <code>/dist/lang/</code> (files refers to languages, folders are charsets)</li><li>You can make a custom build</li></ol><p>When loading language packs, make sure that the library was loaded before:</p><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">src</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">dist/flexsearch.min.js</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;&lt;/</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">src</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">dist/lang/latin/default.min.js</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;&lt;/</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">src</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">dist/lang/en.min.js</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;&lt;/</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span></code></pre></div><p>Because you loading packs as external packages (non-ES6-modules) you have to initialize them by shortcuts:</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> index </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">FlexSearch</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">charset</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">latin:soundex</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">lang</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">en</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><blockquote><p>Use the <code>charset:variant</code> notation to assign charset and its variants. When just passing the charset without a variant will automatically resolve as <code>charset:default</code>.</p></blockquote><p>You can also override existing definitions, e.g.:</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> index </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">FlexSearch</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">charset</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">latin</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">lang</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">en</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">matcher</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><p>Passed definitions will <strong>not</strong> extend default definitions, they will replace them. When you like to extend a definition just create a new language file and put in all the content.</p><h4 id="encoder-variants-1" tabindex="-1">Encoder Variants <a class="header-anchor" href="#encoder-variants-1" aria-hidden="true">#</a></h4><p>It is pretty straight forward when using an encoder variant:</p><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">src</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">dist/flexsearch.min.js</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;&lt;/</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">src</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">dist/lang/latin/advanced.min.js</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;&lt;/</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">src</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">dist/lang/latin/extra.min.js</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;&lt;/</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">src</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">dist/lang/en.min.js</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;&lt;/</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span></code></pre></div><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> index_advanced </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">FlexSearch</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">charset</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">latin:advanced</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> index_extra </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">FlexSearch</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">charset</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">latin:extra</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><p>Again use the <code>charset:variant</code> notation to define charset and its variants.</p><h3 id="partial-tokenizer" tabindex="-1">Partial Tokenizer <a class="header-anchor" href="#partial-tokenizer" aria-hidden="true">#</a></h3><p>In FlexSearch you can&#39;t provide your own partial tokenizer, because it is a direct dependency to the core unit. The built-in tokenizer of FlexSearch splits each word into chunks by different patterns:</p><ol><li>strict (supports contextual index)</li><li>forward</li><li>reverse / both</li><li>full</li><li>ngram (supports contextual index, coming soon)</li></ol><h3 id="language-processing-pipeline" tabindex="-1">Language Processing Pipeline <a class="header-anchor" href="#language-processing-pipeline" aria-hidden="true">#</a></h3><p>This is the default pipeline provided by FlexSearch:</p><p><img src="https://cdn.jsdelivr.net/gh/nextapps-de/flexsearch@45d02844dd65a43b0c46633c509762ae0446bb97/doc/pipeline.svg?2"></p><h4 id="custom-pipeline" tabindex="-1">Custom Pipeline <a class="header-anchor" href="#custom-pipeline" aria-hidden="true">#</a></h4><p>At first take a look into the default pipeline in <code>src/common.js</code>. It is very simple and straight forward. The pipeline will process as some sort of inversion of control, the final encoder implementation has to handle charset and also language specific transformations. This workaround has left over from many tests.</p><p>Inject the default pipeline by e.g.:</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">this.</span><span style="color:#82AAFF;">pipeline</span><span style="color:#A6ACCD;">(</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">/* string: */</span><span style="color:#A6ACCD;"> str</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">toLowerCase</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">/* normalize: */</span><span style="color:#A6ACCD;"> </span><span style="color:#FF9CAC;">false</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">/* split: */</span><span style="color:#A6ACCD;"> split</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">/* collapse: */</span><span style="color:#A6ACCD;"> </span><span style="color:#FF9CAC;">false</span></span>
<span class="line"><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><p>Use the pipeline schema from above to understand the iteration and the difference of pre-encoding and post-encoding. Stemmer and matchers needs to be applied after charset normalization but before language transformations, filters also.</p><p>Here is a good example of extending pipelines: <code>src/lang/latin/extra.js</code> \u2192 <code>src/lang/latin/advanced.js</code> \u2192 <code>src/lang/latin/simple.js</code>.</p><h3 id="how-to-contribute" tabindex="-1">How to contribute? <a class="header-anchor" href="#how-to-contribute" aria-hidden="true">#</a></h3><p>Search for your language in <code>src/lang/</code>, if it exists you can extend or provide variants (like dialect/slang). If the language doesn&#39;t exist create a new file and check if any of the existing charsets (e.g. latin) fits to your language. When no charset exist, you need to provide a charset as a base for the language.</p><p>A new charset should provide at least:</p><ol><li><code>encode</code> A function which normalize the charset of a passed text content (remove special chars, lingual transformations, etc.) and <strong>returns an array of separated words</strong>. Also stemmer, matcher or stopword filter needs to be applied here. When the language has no words make sure to provide something similar, e.g. each chinese sign could also be a &quot;word&quot;. Don&#39;t return the whole text content without split.</li><li><code>rtl</code> A boolean flag which indicates right-to-left encoding</li></ol><p>Basically the charset needs just to provide an encoder function along with an indicator for right-to-left encoding:</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">encode</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">str</span><span style="color:#89DDFF;">){</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">return</span><span style="color:#F07178;"> [</span><span style="color:#A6ACCD;">str</span><span style="color:#F07178;">] </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> rtl </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#FF9CAC;">false</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div>`,60),p=[o];function t(r,c,i,D,d,y){return n(),a("div",null,p)}const A=s(e,[["render",t]]);export{C as __pageData,A as default};
