import{_ as t,c as e,o,a}from"./app.5c7a3dbc.js";const u=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[{"level":2,"title":"Memory Allocation","slug":"memory-allocation","link":"#memory-allocation","children":[{"level":3,"title":"Memory Consumption","slug":"memory-consumption","link":"#memory-consumption","children":[]},{"level":3,"title":"Compare Impact of Memory Allocation","slug":"compare-impact-of-memory-allocation","link":"#compare-impact-of-memory-allocation","children":[]},{"level":3,"title":"Full Comparison Table","slug":"full-comparison-table","link":"#full-comparison-table","children":[]}]}],"relativePath":"api/memory.md"}'),s={name:"api/memory.md"},l=a(`<h2 id="memory-allocation" tabindex="-1">Memory Allocation <a class="header-anchor" href="#memory-allocation" aria-hidden="true">#</a></h2><p>The book &quot;Gulliver&#39;s Travels Swift Jonathan 1726&quot; was fully indexed for the examples below.</p><p>The most memory-optimized meaningful setting will allocate just 1.2 Mb for the whole book indexed! This is probably the most tiny memory footprint you will get from a search library.</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">encode</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">./lang/latin/extra.js</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">index </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Index</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">encode</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> encode</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">tokenize</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">strict</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">optimize</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FF9CAC;">true</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">resolution</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">minlength</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">3</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">fastupdate</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FF9CAC;">false</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">context</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FF9CAC;">false</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><p><a name="consumption"></a></p><h3 id="memory-consumption" tabindex="-1">Memory Consumption <a class="header-anchor" href="#memory-consumption" aria-hidden="true">#</a></h3><p>The book &quot;Gulliver&#39;s Travels&quot; (Swift Jonathan 1726) was completely indexed for this test:</p><br><img src="https://cdn.jsdelivr.net/gh/nextapps-de/flexsearch@master/doc/memory-comparison.svg?v=2"><h3 id="compare-impact-of-memory-allocation" tabindex="-1">Compare Impact of Memory Allocation <a class="header-anchor" href="#compare-impact-of-memory-allocation" aria-hidden="true">#</a></h3><p>by default a lexical index is very small:<br><code>depth: 0, bidirectional: 0, resolution: 3, minlength: 0</code> =&gt; 2.1 Mb</p><p>a higher resolution will increase the memory allocation:<br><code>depth: 0, bidirectional: 0, resolution: 9, minlength: 0</code> =&gt; 2.9 Mb</p><p>using the contextual index will increase the memory allocation:<br><code>depth: 1, bidirectional: 0, resolution: 9, minlength: 0</code> =&gt; 12.5 Mb</p><p>a higher contextual depth will increase the memory allocation:<br><code>depth: 2, bidirectional: 0, resolution: 9, minlength: 0</code> =&gt; 21.5 Mb</p><p>a higher minlength will decrease memory allocation:<br><code>depth: 2, bidirectional: 0, resolution: 9, minlength: 3</code> =&gt; 19.0 Mb</p><p>using bidirectional will decrease memory allocation:<br><code>depth: 2, bidirectional: 1, resolution: 9, minlength: 3</code> =&gt; 17.9 Mb</p><p>enable the option &quot;fastupdate&quot; will increase memory allocation:<br><code>depth: 2, bidirectional: 1, resolution: 9, minlength: 3</code> =&gt; 6.3 Mb</p><h3 id="full-comparison-table" tabindex="-1">Full Comparison Table <a class="header-anchor" href="#full-comparison-table" aria-hidden="true">#</a></h3><p>Every search library is constantly in competition with these 4 properties:</p><ol><li>Memory Allocation</li><li>Performance</li><li>Matching Capabilities</li><li>Relevance Order (Scoring)</li></ol><p>FlexSearch provides you many parameters you can use to adjust the optimal balance for your specific use-case.</p><table><thead><tr><th>Modifier</th><th>Memory Impact *</th><th>Performance Impact **</th><th>Matching Impact **</th><th>Scoring Impact **</th></tr></thead><tbody><tr><td>resolution</td><td>+1 (per level)</td><td>+1 (per level)</td><td>0</td><td>+2 (per level)</td></tr><tr><td>depth</td><td>+4 (per level)</td><td>-1 (per level)</td><td>-10 + depth</td><td>+10</td></tr><tr><td>minlength</td><td>-2 (per level)</td><td>+2 (per level)</td><td>-3 (per level)</td><td>+2 (per level)</td></tr><tr><td>bidirectional</td><td>-2</td><td>0</td><td>+3</td><td>-1</td></tr><tr><td>fastupdate</td><td>+1</td><td>+10 (update, remove)</td><td>0</td><td>0</td></tr><tr><td>optimize: true</td><td>-7</td><td>-1</td><td>0</td><td>-3</td></tr><tr><td>encoder: &quot;icase&quot;</td><td>0</td><td>0</td><td>0</td><td>0</td></tr><tr><td>encoder: &quot;simple&quot;</td><td>-2</td><td>-1</td><td>+2</td><td>0</td></tr><tr><td>encoder: &quot;advanced&quot;</td><td>-3</td><td>-2</td><td>+4</td><td>0</td></tr><tr><td>encoder: &quot;extra&quot;</td><td>-5</td><td>-5</td><td>+6</td><td>0</td></tr><tr><td>encoder: &quot;soundex&quot;</td><td>-6</td><td>-2</td><td>+8</td><td>0</td></tr><tr><td>tokenize: &quot;strict&quot;</td><td>0</td><td>0</td><td>0</td><td>0</td></tr><tr><td>tokenize: &quot;forward&quot;</td><td>+3</td><td>-2</td><td>+5</td><td>0</td></tr><tr><td>tokenize: &quot;reverse&quot;</td><td>+5</td><td>-4</td><td>+7</td><td>0</td></tr><tr><td>tokenize: &quot;full&quot;</td><td>+8</td><td>-5</td><td>+10</td><td>0</td></tr><tr><td>document index</td><td>+3 (per field)</td><td>-1 (per field)</td><td>0</td><td>0</td></tr><tr><td>document tags</td><td>+1 (per tag)</td><td>-1 (per tag)</td><td>0</td><td>0</td></tr><tr><td>store: true</td><td>+5 (per document)</td><td>0</td><td>0</td><td>0</td></tr><tr><td>store: [fields]</td><td>+1 (per field)</td><td>0</td><td>0</td><td>0</td></tr><tr><td>cache: true</td><td>+10</td><td>+10</td><td>0</td><td>0</td></tr><tr><td>cache: 100</td><td>+1</td><td>+9</td><td>0</td><td>0</td></tr><tr><td>type of ids: number</td><td>0</td><td>0</td><td>0</td><td>0</td></tr><tr><td>type of ids: string</td><td>+3</td><td>-3</td><td>0</td><td>0</td></tr></tbody></table><ul><li>range from -10 to 10, lower is better (-10 =&gt; big decrease, 0 =&gt; unchanged, +10 =&gt; big increase)<br> ** range from -10 to 10, higher is better</li></ul><p><a name="presets"></a></p>`,24),n=[l];function d(r,p,i,c,m,y){return o(),e("div",null,n)}const D=t(s,[["render",d]]);export{u as __pageData,D as default};
