import{_ as s,c as n,o as e,a}from"./app.5c7a3dbc.js";const F=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[{"level":2,"title":"Append Contents","slug":"append-contents","link":"#append-contents","children":[]},{"level":2,"title":"Update item from an index","slug":"update-item-from-an-index","link":"#update-item-from-an-index","children":[]},{"level":2,"title":"Remove item from an index","slug":"remove-item-from-an-index","link":"#remove-item-from-an-index","children":[]}],"relativePath":"api/edit-index.md"}'),o={name:"api/edit-index.md"},t=a(`<h2 id="append-contents" tabindex="-1">Append Contents <a class="header-anchor" href="#append-contents" aria-hidden="true">#</a></h2><p>You can append contents to an existing index like:</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki"><code><span class="line"><span style="color:#A6ACCD;">index</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">append</span><span style="color:#A6ACCD;">(id</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> content)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><p>This will not overwrite the old indexed contents as it will do when perform <code>index.update(id, content)</code>. Keep in mind that <code>index.add(id, content)</code> will also perform &quot;update&quot; under the hood when the id was already being indexed.</p><p>Appended contents will have their own context and also their own full <code>resolution</code>. Therefore, the relevance isn&#39;t being stacked but gets its own context.</p><p>Let us take this example:</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki"><code><span class="line"><span style="color:#A6ACCD;">index</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">add</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">some index</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">index</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">append</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">some appended content</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">index</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">add</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">some text</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">index</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">append</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">index appended content</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><p>When you query <code>index.search(&quot;index&quot;)</code> then you will get index id 1 as the first entry in the result, because the context starts from zero for the appended data (isn&#39;t stacked to the old context) and here &quot;index&quot; is the first term.</p><p>If you didn&#39;t want this behavior than just use the standard <code>index.add(id, content)</code> and provide the full length of content.</p><h2 id="update-item-from-an-index" tabindex="-1">Update item from an index <a class="header-anchor" href="#update-item-from-an-index" aria-hidden="true">#</a></h2><blockquote><p>Index.<strong>update(id, string)</strong></p></blockquote><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki"><code><span class="line"><span style="color:#A6ACCD;">index</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">update</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Max Miller</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><h2 id="remove-item-from-an-index" tabindex="-1">Remove item from an index <a class="header-anchor" href="#remove-item-from-an-index" aria-hidden="true">#</a></h2><blockquote><p>Index.<strong>remove(id)</strong></p></blockquote><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki"><code><span class="line"><span style="color:#A6ACCD;">index</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">remove</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div>`,15),p=[t];function l(c,r,d,i,D,y){return e(),n("div",null,p)}const A=s(o,[["render",l]]);export{F as __pageData,A as default};
